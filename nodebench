#!/usr/bin/env python2.7

import argparse
import signal
import subprocess, sys, time, os
from itertools import ifilter
from random import seed, shuffle

parser = argparse.ArgumentParser(description="NodeBench benchmarking harness.")
parser.add_argument("-l", "--list-benchmarks", action="store_true",
                    dest="list_benchmarks", help="list benchmarks and exit")
parser.add_argument("-b", "--benchmark", dest="benchmark",
                    help="benchmark to run")
parser.add_argument("-n", "--node-binary", dest="node_binary", 
                    help="node binary to use", default="node")
parser.add_argument("-w", "--wrk-binary", dest="wrk_binary", 
                    help="wrk binary to use", default="wrk2/wrk")
parser.add_argument("-d", "--duration", dest="duration",
                    help="duration of client load test", default="5s")
parser.add_argument("-c", "--clients", dest="clients",
                    help="number of clients (always 1 connection per client)", default="1")
parser.add_argument("-r", "--rps", dest="rps",
                    help="expected RPS", default="10")

args = parser.parse_args()
if not (args.benchmark or args.list_benchmarks):
    parser.error('One of -l or -b must be provided. See -h for help.')
list_benchmark = args.list_benchmarks
benchmark = args.benchmark
node_binary = args.node_binary
wrk_binary = args.wrk_binary
duration = args.duration
clients = args.clients
rps = args.rps

benchmark_registry = {
    "ClientManager" : { "startup_script" : "app.js",
                        "wrk_script"     : "loadgen/clientmanager.lua",
                        "mongodb_name"   : "clients-dev",
                        "port"           : "50005"},
    "etherpad-lite" : { "startup_script" : "node_modules/ep_etherpad-lite/node/server.js",
                        "wrk_script"     : "loadgen/etherpad.lua",
                        "port"           : "50000"},
    "habitrpg"      : { "startup_script" : "website/src/server.js",
                        "wrk_script"     : "loadgen/habitrpg.lua",
                        "mongodb_name"   : "habitrpg",
                        "port"           : "50006"},
    "lets-chat"     : { "startup_script" : "app.js",
                        "wrk_script"     : "loadgen/chat.lua",
                        "mongodb_name"   : "lets-chat",
                        "port"           : "50001"},
    "lighter"       : { "startup_script" : "server.js",
                        "wrk_script"     : "loadgen/lighter.lua",
                        "port"           : "50002"},
    "nodejs-mud"    : { "startup_script" : "server.js",
                        "wrk_script"     : "loadgen/mud.lua",
                        "port"           : "50004"},
    "nodejs-todo"   : { "startup_script" : "server.js",
                        "wrk_script"     : "loadgen/todo.lua",
                        "port"           : "50003"},
    "word-finder"   : { "startup_script" : "server.js",
                        "wrk_script"     : "loadgen/word.lua",
                        "port"           : "50007"}
}

if list_benchmark:
    for app in benchmark_registry.keys():
        print app
    sys.exit(0)

benchmark_info = benchmark_registry[benchmark]
benchmark_dir = "applications/%s" % benchmark
startup_script = benchmark_info["startup_script"]
wrk_script = benchmark_info["wrk_script"]
mongodb = benchmark_info["mongodb_name"]
port = benchmark_info["port"]

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

# Prolog: import the mongodb database
if benchmark == "habitrpg":
    subprocess.call(["mongorestore", "-d", mongodb, "applications/habitrpg/database/habitrpg"])

with cd(benchmark_dir):
    server=subprocess.Popen([node_binary, startup_script ])
time.sleep(15)
server_url = "http://localhost:%s" % (port)
subprocess.call([wrk_binary, "-t", clients, "-c", clients, "-d", duration, "-R", rps, "-s", wrk_script, server_url])

# Epilog: drop the mongodb batabase so the next run will start from a clean slate.
if benchmark == "ClientManager" or benchmark == "lets-chat" or benchmark == "habitrpg":
    subprocess.call(["mongo", mongodb, "--eval", "db.dropDatabase()"])

server.kill()
if server.poll() == None:
    print "Node.js server successfully killed!"
else:
    print "Node.js server is still running!"

