#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <iterator>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

/*
 * Calculate the footprint of node kernels
 * Read from footprint.out.inst and mapping.out.final from each application directory
 * The mapping.out.final file is generated by func.sh
 * */

using namespace std;

typedef enum 
{
    V8,
	NATIVE,
	OTHERS
} KERNEL;

int main(int argc, char **argv)
{
	if(argc != 3)
	{
		cout << "Usage: ./func footprint mapping\n";
		exit(1);
	}

	char *footprint = argv[1];
	std::ifstream fpfile(footprint);
	char *mapping = argv[2];
	std::ifstream mapfile(mapping);

	std::string line;
	map<uint64_t, string> funcMap;
	while (std::getline(mapfile, line))
	{
		uint64_t addr;
		string func_name;
		std::stringstream ss(line);
    	std::string item;

		int item_num = -1;
    	while (std::getline(ss, item, '\t'))
		{
			item_num++;
			if(item_num == 0) addr = stoull(item);
			else if(item_num == 1) func_name = item;
			else exit;
		}

		funcMap[addr] = func_name;
	}
	cout << "Finish reading mapping file" << endl;

	vector<uint64_t> dynamic_insts = {0, 0, 0};
	int line_num = 0;
	while (std::getline(fpfile, line))
	{
		if(line_num++ == 0) continue;
		if(line_num % 100000 == 0) cout << line_num << endl;

		std::stringstream ss(line);
    	std::string item;
		int item_num = -1;
		KERNEL kernel;

    	while (std::getline(ss, item, ' '))
		{
			item_num++;
			if(item_num == 0)
			{
				uint64_t addr = stoull(item);
				string f_name = funcMap[addr];
				if(f_name.compare("v8") == 0) kernel = V8;
				else if(f_name.compare("invalid_rtn") == 0) kernel = NATIVE;
				else kernel = OTHERS;
			}
			else
			{
				dynamic_insts[kernel] += stoull(item);
			}
    	}
	}

	uint64_t dynamic_tot_insts = dynamic_insts[V8] + dynamic_insts[NATIVE] + dynamic_insts[OTHERS];
	cout << "Finish processing " << line_num + 1 << " events " << dynamic_tot_insts << " instructions" << endl;

	cout << "Dynamic footprint:" << endl;
	cout << "V8:\t" << (long double)dynamic_insts[V8] / (long double)dynamic_tot_insts * 100 << endl;
	cout << "NATIVE:\t" << (long double)dynamic_insts[NATIVE] / (long double)dynamic_tot_insts * 100 << endl;
	cout << "OTHERS:\t" << (long double)dynamic_insts[OTHERS] / (long double)dynamic_tot_insts * 100 << endl;
}
